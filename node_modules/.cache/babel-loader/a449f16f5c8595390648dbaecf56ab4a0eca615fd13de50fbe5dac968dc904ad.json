{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Downloads\\\\WebApplication1\\\\src\\\\components\\\\Filters.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Filters = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  useEffect(() => {\n    // Fetch and parse JSON data when the component mounts\n    fetch(\"/data/mock_vinyls.json\") // Note: This path is relative to the public directory in CodeSandbox\n    .then(response => response.json()).then(jsonData => {\n      console.log(jsonData);\n      setData(jsonData);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, []); //empty dependency array ensures that this effect runs once when the component mounts.\n  // Define filter criteria\n  const FilterData = () => {\n    const genre = data.filter(i => i.genre === 'artist');\n    setFilteredData(artist);\n  };\n  // call filterData function when componet is renered.\n  useEffect(() => {\n    FilterData();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Filters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredData.map(i => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: i.artist\n      }, i.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Filters, \"dZ+GKxaCfbl8OuyaGWbiJywb1XQ=\");\n_c = Filters;\nexport default Filters;\nvar _c;\n$RefreshReg$(_c, \"Filters\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Filters","_s","data","setData","filteredData","setFilteredData","fetch","then","response","json","jsonData","console","log","catch","error","FilterData","genre","filter","i","artist","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","_c","$RefreshReg$"],"sources":["C:/Users/micha/Downloads/WebApplication1/src/components/Filters.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst Filters = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    useEffect(() => {\r\n        // Fetch and parse JSON data when the component mounts\r\n        fetch(\"/data/mock_vinyls.json\") // Note: This path is relative to the public directory in CodeSandbox\r\n          .then((response) => response.json())\r\n          .then((jsonData) => {\r\n            console.log(jsonData);\r\n            setData(jsonData);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error fetching data:\", error);\r\n          });\r\n      }, []); //empty dependency array ensures that this effect runs once when the component mounts.\r\n      // Define filter criteria\r\n      const FilterData = () => {\r\n        const genre = data.filter(i => i.genre === 'artist');\r\n        setFilteredData(artist);\r\n      };\r\n      // call filterData function when componet is renered.\r\n      useEffect(() => {\r\n        FilterData();\r\n      },[data])\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>Filters</h3>\r\n            <div>\r\n                {filteredData.map(i => (\r\n                    <span key={i.id}>{i.artist}</span>\r\n                ))}\r\n                \r\n            </div>\r\n        </>\r\n    );\r\n}; export default Filters;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpDC,SAAS,CAAC,MAAM;IACZ;IACAW,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAAA,CAC7BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrBP,OAAO,CAACO,QAAQ,CAAC;IACnB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,KAAK,GAAGd,IAAI,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,KAAK,KAAK,QAAQ,CAAC;IACpDX,eAAe,CAACc,MAAM,CAAC;EACzB,CAAC;EACD;EACAxB,SAAS,CAAC,MAAM;IACdoB,UAAU,CAAC,CAAC;EACd,CAAC,EAAC,CAACb,IAAI,CAAC,CAAC;EAGX,oBACIL,OAAA,CAAAE,SAAA;IAAAqB,QAAA,gBACIvB,OAAA;MAAAuB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB3B,OAAA;MAAAuB,QAAA,EACKhB,YAAY,CAACqB,GAAG,CAACP,CAAC,iBACfrB,OAAA;QAAAuB,QAAA,EAAkBF,CAAC,CAACC;MAAM,GAAfD,CAAC,CAACQ,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAACvB,EAAA,CAtCID,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AAsCV,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}