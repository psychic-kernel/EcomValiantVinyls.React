{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Downloads\\\\WebApplication1\\\\src\\\\components\\\\InventoryList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n//Components\nimport Filters from \"./Filters\";\n/**\r\n * artist\r\n * album\r\n * genre\r\n * release_date\r\n * label\r\n * price\r\n * tracklist\r\n * cover_image\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InventoryList = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  useEffect(() => {\n    // Fetch and parse JSON data when the component mounts\n    fetch(\"/data/mock_vinyls.json\") // Note: This path is relative to the public directory in CodeSandbox\n    .then(response => response.json()).then(jsonData => {\n      console.log(jsonData);\n      setData(jsonData);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  }, []); //empty dependency array ensures that this effect runs once when the component mounts.\n\n  // Define filter criteria\n  const FilterData = () => {\n    const genre = data.filter(i => i.genre === 'pop');\n    setFilteredData(genre);\n  };\n  // call filterData function when componet is renered.\n  useEffect(() => {\n    FilterData();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredData.map(i => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Genre: \", i.genre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(InventoryList, \"dZ+GKxaCfbl8OuyaGWbiJywb1XQ=\");\n_c = InventoryList;\nexport default InventoryList;\nvar _c;\n$RefreshReg$(_c, \"InventoryList\");","map":{"version":3,"names":["useState","useEffect","Filters","jsxDEV","_jsxDEV","Fragment","_Fragment","InventoryList","_s","data","setData","filteredData","setFilteredData","fetch","then","response","json","jsonData","console","log","catch","error","FilterData","genre","filter","i","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/micha/Downloads/WebApplication1/src/components/InventoryList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n//Components\r\nimport Filters from \"./Filters\";\r\n/**\r\n * artist\r\n * album\r\n * genre\r\n * release_date\r\n * label\r\n * price\r\n * tracklist\r\n * cover_image\r\n */\r\n\r\nconst InventoryList = () => {\r\n  const [data, setData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch and parse JSON data when the component mounts\r\n    fetch(\"/data/mock_vinyls.json\") // Note: This path is relative to the public directory in CodeSandbox\r\n      .then((response) => response.json())\r\n      .then((jsonData) => {\r\n        console.log(jsonData);\r\n        setData(jsonData);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data:\", error);\r\n      });\r\n  }, []); //empty dependency array ensures that this effect runs once when the component mounts.\r\n\r\n  // Define filter criteria\r\n  const FilterData = () => {\r\n    const genre = data.filter(i => i.genre === 'pop');\r\n    setFilteredData(genre);\r\n  };\r\n  // call filterData function when componet is renered.\r\n  useEffect(() => {\r\n    FilterData();\r\n  },[data])\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {filteredData.map(i => (\r\n          <><span>Genre: {i.genre}</span><br/></>\r\n        ))}\r\n        {/* {data.map((item) => (\r\n          <div key={item.id} className=\"inventory-list\">\r\n            <img src={item.cover_image} alt=\"Album artwork\" style={{ width: 300}}/>\r\n            <br />\r\n            <p id=\"artist\">Artist: {item.artist}</p>\r\n            <p id=\"album\">Album: {item.album_title}</p>\r\n            <p id=\"genre\">Genre: {item.genre}</p>\r\n            <p id=\"releaseDate\">Release Date: {item.release_date}</p>\r\n            <p id=\"label\">Label: {item.label}</p>\r\n            <p id=\"price\">Price: {item.price}</p>\r\n            <p id=\"tracklist\">Tracklist: {item.tracklist}</p>\r\n          </div>\r\n        ))} */}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default InventoryList;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,OAAOC,OAAO,MAAM,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAWA,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd;IACAY,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAAA,CAC7BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrBP,OAAO,CAACO,QAAQ,CAAC;IACnB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,KAAK,GAAGd,IAAI,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,KAAK,KAAK,KAAK,CAAC;IACjDX,eAAe,CAACW,KAAK,CAAC;EACxB,CAAC;EACD;EACAtB,SAAS,CAAC,MAAM;IACdqB,UAAU,CAAC,CAAC;EACd,CAAC,EAAC,CAACb,IAAI,CAAC,CAAC;EAET,oBACEL,OAAA;IAAAsB,QAAA,eACEtB,OAAA;MAAAsB,QAAA,EACGf,YAAY,CAACgB,GAAG,CAACF,CAAC,iBACjBrB,OAAA,CAAAE,SAAA;QAAAoB,QAAA,gBAAEtB,OAAA;UAAAsB,QAAA,GAAM,SAAO,EAACD,CAAC,CAACF,KAAK;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAAA3B,OAAA;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,eAAE,CACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjDID,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AAkDnB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}